{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This demo case demonstrates functionality in FRAM open-source modelling framework for running energy market models. </p> <p>The demo case is modelling of the present-day European power market using JulES open-source power market model. The case is based on openly available data from different data providers, such as the Norwegian Water Resources and Energy Directorate (NVE), ENTSOE-E and other data providers. Detailed information about the data sources and the dataset can be found in dataset repository.  </p> <p>Important! Modelling in this demo case is by no means meant to be realistic. It is only used for demonstration purposes and must not be used for real analyses or investment decisions. NVE does not stand for the assumptions or the model results in this demo. Users must be aware of possible errors and inaccuracies in the dataset. NVE is not liable for any direct or indirect losses as a result of the use of the demo or in connection with copying or further distribution of the information in the modelling in this demo.</p>"},{"location":"#features-in-fram-that-we-want-to-demonstrate-with-this-demo","title":"Features in FRAM that we want to demonstrate with this demo:","text":"<ul> <li>model-independent database and a solid database handling package that can be adjusted depending on your needs</li> <li>efficient processing of large data amounts </li> <li>smart and innovative system for data transformation for the given power market model </li> <li>easy aggregation and disaggregation using core model</li> <li>flexibility and modularity - FRAM can be extended and adjusted depending on your needs </li> <li>easy APIs</li> </ul> <p>Image \u00a9 Pixabay</p>"},{"location":"how_to_run_demo/","title":"How to run demo","text":""},{"location":"how_to_run_demo/#how-to-run-the-demo","title":"How to run the demo","text":"<p>To run the demo you first need to set up paths in script demo_utils.py</p> <p>Path to the database. The database has already been installed for you when you installed pip install fram-demo. Check where the database was installed and set the path here.</p> <p>DATASET_SOURCE = Path(r\"path/to/your/database\").resolve()</p> <p>Path to demo folder. Can be any folder on your computer.</p> <p>DEMO_FOLDER = Path(\"path/to/your/demo/folder\") </p> <p>Path to Julia and will download Julia when none. Julia is an open-source programming language and is used in this demo to run JuLES power market model in this demo and will be installed in this path. If Julia is already downloaded, replace with Path to download.</p> <p>JULIA_PATH_EXE = None</p>"},{"location":"how_to_run_demo/#demo-case-steps","title":"Demo case steps","text":"<p>The demo consists of 8 steps. This includes a demo_0 file that runs all the following steps in the correct order:</p> <ol> <li> <p>demo_1_download_dataset.py - creates a new model object and populates it with data from the database. Saves the populated object as a pickle file.</p> </li> <li> <p>demo_2_populate_model.py - aggregates data per country using node aggregator. Saves the aggregated object as a pickle file.</p> </li> <li> <p>demo_3_solve_model.py - configures and solves JulES power market model for the base case. The same configuration is used for both base run and sensitivinty run in this demo. OBS! Not all JulES configurations are supported yet, contact FRAM team if you want to test your own configuration and get an error.</p> </li> <li> <p>demo_4_modified_solve.py - runs a sensitivity case where CO2 price is scaled up by 20%. JulES configuration is the same.</p> </li> <li> <p>demo_5_detailed_solve.py - solves model using detailed hydropower data</p> </li> <li> <p>demo_6_nordic_solve.py - solved nordic models</p> </li> <li> <p>demo_7_get_data.py - will write price, regional volumes and hydropower results to h5 format in order to send them to the dashboard.</p> </li> <li> <p>demo_8_run_dashboard.py - will run the dashboard in a browser and visualize results from h5 files.</p> </li> </ol> <p>Denne siden er uferdig, s\u00e5 ikke klikk See description of the demo case to learn what countries and years are included into the model runs. </p>"},{"location":"what_demo_includes/","title":"What the demo case includes","text":"<p>The demo case includes 4 model solves:</p> <ul> <li>Northern Europe aggregated (endogenous and exogenous regions) (demo_3)</li> <li>Northern Europe aggregated (endogenous and exogenous regions) with demand in Norway increased by 20% (demo_4)</li> <li>Northern Europe with detailed hydropower data in the northern countries (endogenous and exogenous regions) (demo_5)</li> <li>Nordic countries (Norway, Sweden, Finland, Denmark) using exogenous prices in remaining countries from the previous model solve in demo_3. Includes a 20% increase in demand in Norway. (demo_6)</li> </ul> <p>The following countries are included in the demo case: </p> Countries included demo_3-demo_5 demo_6 Norway endogenous endogenous Sweden endogenous endogenous Finland endogenous endogenous Denmark endogenous endogenous Netherlands endogenous exogenous Germany endogenous exogenous UK endogenous exogenous Poland endogenous exogenous Lithuania endogenous exogenous Estonia endogenous exogenous Latvia exogenous not included France exogenous not included Belgium exogenous not included Switzerland exogenous not included Austria exogenous not included Czech Republic exogenous not included Slovakia exogenous not included <p>Both model runs are a series-simulation (...)</p>"},{"location":"reference/EventHandler/","title":"<code>EventHandler</code> class","text":"<p><code>EventHandler</code> class is used in FRAM demo to control display of demo output and handle events and information messages to the user. It displays differet kind of messages:</p> <ul> <li>info</li> <li>warning</li> <li>debug</li> <li>error</li> </ul> <p>It is imported into the demo in <code>demo_utils.py</code> script:</p> <pre><code>from framdemo.EventHandler import EventHandler\n</code></pre>"},{"location":"reference/EventHandler/#framdemo.EventHandler","title":"<code>framdemo.EventHandler</code>","text":"<p>Custom event handler to control display of demo output.</p>"},{"location":"reference/EventHandler/#framdemo.EventHandler.EventHandler","title":"<code>EventHandler</code>","text":"<p>Handle events from framcore.events.send_event.</p> Source code in <code>framdemo/EventHandler.py</code> <pre><code>class EventHandler:\n    \"\"\"Handle events from framcore.events.send_event.\"\"\"\n\n    def handle_event(self, sender: object, event_type: str, **kwargs: dict[str, object]) -&gt; None:\n        \"\"\"Try to handle event using rich.print. Use Python.print otherwise.\"\"\"\n        name = self._get_sender_name(sender)\n        try:\n            self._handle_event_using_rich(name, event_type, **kwargs)\n        except Exception:\n            if name:\n                print(name, event_type, kwargs)\n            else:\n                print(event_type, kwargs)\n\n    def _get_sender_name(self, sender: object) -&gt; str:\n        if inspect.isbuiltin(sender) or sender is None:\n            return \"\"\n        is_func = False\n        try:\n            path = Path(inspect.getfile(type(sender)))\n        except Exception:\n            path = Path(inspect.getfile(sender))\n            is_func = True\n        package = None\n        for parent in path.parents:\n            if parent.name in [\"framcore\", \"framdemo\", \"framdata\", \"framjules\"]:\n                package = parent.name\n                break\n        name = sender.__name__ if is_func else type(sender).__name__\n\n        try:\n            if not is_func:\n                caller_method_name = inspect.stack()[5].function\n                name = f\"{name}.{caller_method_name}\"\n        except Exception:\n            pass\n\n        return f\"{name}\" if package is None else f\"{package}.{name}\"\n\n    def _handle_event_using_rich(\n        self,\n        sender_name: str,\n        event_type: str,\n        **kwargs: dict[str, object],\n    ) -&gt; None:\n        import rich  # noqa: PLC0415\n\n        sender_color = \"blue\"\n        sender_string = f\"[{sender_color}]{sender_name}: [/{sender_color}]\" if sender_name else \"\"\n\n        if event_type in [\"info\", \"debug\", \"warning\", \"error\"]:\n            color = {\n                \"info\": \"yellow\",\n                \"debug\": \"green\",\n                \"warning\": \"magenta\",\n                \"error\": \"red\",\n            }[event_type]\n            message = kwargs[\"message\"]\n\n            rich.print(f\"[bold {color}]{event_type}: [/bold {color}]{sender_string}{message}\")\n            return\n\n        if event_type == \"display\":\n            color = \"cyan\"\n            message = kwargs[\"message\"]\n            obj = kwargs[\"object\"]\n            obj = \"\" if obj is None else obj\n            if isinstance(obj, dict):\n                digits_round = kwargs.get(\"digits_round\", 3)\n                obj = self._try_prettify(obj, digits_round)\n            rich.print(f\"[bold {color}]{event_type}: [/bold {color}]{sender_string}{message}\", obj)\n            return\n\n        color = \"cyan\"\n        rich.print(f\"[bold {color}]{event_type}: [/bold {color}]{sender_string}\", kwargs)\n\n    def _try_prettify(self, obj: dict, digits_round: int) -&gt; dict:\n        if self._has_len_1(obj):\n            copied_obj = deepcopy(obj)\n            try:\n                self._convert_len_1_to_float(copied_obj, digits_round)\n                return copied_obj\n            except Exception:\n                pass\n        return obj\n\n    def _has_len_1(self, obj: object) -&gt; bool:\n        if isinstance(obj, dict):\n            for some_value in obj.values():\n                return self._has_len_1(some_value)\n            return False\n        return self._is_len_1(obj)\n\n    def _is_len_1(self, obj: object) -&gt; bool:\n        try:\n            return len(obj) == 1\n        except Exception:\n            return False\n\n    def _convert_len_1_to_float(self, obj: object, digits_round: int) -&gt; None:\n        if isinstance(obj, dict):\n            for key, value in obj.items():\n                if isinstance(value, dict):\n                    self._convert_len_1_to_float(value, digits_round)\n                else:\n                    obj[key] = round(float(value[0]), digits_round)\n</code></pre>"},{"location":"reference/EventHandler/#framdemo.EventHandler.EventHandler.handle_event","title":"<code>handle_event(sender: object, event_type: str, **kwargs: dict[str, object]) -&gt; None</code>","text":"<p>Try to handle event using rich.print. Use Python.print otherwise.</p> Source code in <code>framdemo/EventHandler.py</code> <pre><code>def handle_event(self, sender: object, event_type: str, **kwargs: dict[str, object]) -&gt; None:\n    \"\"\"Try to handle event using rich.print. Use Python.print otherwise.\"\"\"\n    name = self._get_sender_name(sender)\n    try:\n        self._handle_event_using_rich(name, event_type, **kwargs)\n    except Exception:\n        if name:\n            print(name, event_type, kwargs)\n        else:\n            print(event_type, kwargs)\n</code></pre>"},{"location":"reference/dashboard_app/","title":"<code>dashboard_app.py</code> script","text":"<p><code>dashboard_app.py</code> sript contains outline of the dashboard for results visulaization. Dashboard is built using streamlit package in Python. </p> <p>Script <code>run_dashboard.py</code> in the demo calls upon <code>dashboard_app.py</code> and renders the dashboard in your browser:</p> <pre><code>app_path = current_folder / \"dashboard_app.py\"\nsubprocess.run([\"streamlit\", \"run\", app_path, \"--server.port\", \"5000\"], check=True)\n</code></pre>"},{"location":"reference/dashboard_app/#framdemo.dashboard_app","title":"<code>framdemo.dashboard_app</code>","text":"<p>Simple demo dashboard app.</p> <p>This app reads results from HDF5 files and displays them using Streamlit and Plotly. Pages are craeted for price information, regional results, and hydropower information for the demo purpose.</p> <ol> <li>Sets up infrastructure for the dashboard.</li> </ol>"},{"location":"reference/demo_utils/","title":"<code>demo_utils.py</code> sript","text":"<p><code>demo_utils.py</code> contains paths that must be set by the users to run the demo. It also contains constants and small utility functions to make the demos more robust and easier to follow.</p>"},{"location":"reference/demo_utils/#framdemo.demo_utils","title":"<code>framdemo.demo_utils</code>","text":"<p>Contains paths that may be set by users to override default behaviour.</p> <p>Contains constants and small utility functions to make the demos more robust and easier to follow.</p>"},{"location":"reference/demo_utils/#framdemo.demo_utils.display","title":"<code>display(message: str, obj: object = None, digits_round: int = 1) -&gt; None</code>","text":"<p>Send an object to EventHandler for display.</p> Source code in <code>framdemo/demo_utils.py</code> <pre><code>def display(message: str, obj: object = None, digits_round: int = 1) -&gt; None:\n    \"\"\"Send an object to EventHandler for display.\"\"\"\n    send_event(None, \"display\", message=message, object=obj, digits_round=digits_round)\n</code></pre>"},{"location":"reference/demo_utils/#framdemo.demo_utils.load","title":"<code>load(path: Path) -&gt; object</code>","text":"<p>Read object from pickle file.</p> Source code in <code>framdemo/demo_utils.py</code> <pre><code>def load(path: Path) -&gt; object:\n    \"\"\"Read object from pickle file.\"\"\"\n    with Path.open(path, \"rb\") as f:\n        return pickle.load(f)\n</code></pre>"},{"location":"reference/demo_utils/#framdemo.demo_utils.save","title":"<code>save(obj: object, path: Path) -&gt; None</code>","text":"<p>Write object to pickle file at given path.</p> Source code in <code>framdemo/demo_utils.py</code> <pre><code>def save(obj: object, path: Path) -&gt; None:\n    \"\"\"Write object to pickle file at given path.\"\"\"\n    if not path.parent.exists():\n        path.parent.mkdir(parents=True, exist_ok=True)\n    with Path.open(path, \"wb\") as f:\n        pickle.dump(obj, f)\n</code></pre>"}]}