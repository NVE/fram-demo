{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This demo case demonstrates functionality in FRAM open-source modelling framework. </p> <p>The demo case is modelling of the present-day European power market with focus on the Nordic region using JulES open-source power market model. </p> <p>The case is based on openly available data from different data providers, such as the Norwegian Water Resources and Energy Directorate (NVE), ENTSO-E and others. Detailed information about the data sources and the dataset can be found in dataset repository.  </p>  Important! Modelling in this demo case is by no means meant to be realistic. It is only used for demonstration purposes and must not be used for real analyses or investment decisions. NVE does not stand for the assumptions or the model results in this demo. Users must be aware of possible errors and inaccuracies in the dataset. NVE is not liable for any direct or indirect losses as a result of the use of the demo or in connection with copying or further distribution of the information in the modelling in this demo.   <p>Features in FRAM that we want to demonstrate in this demo:</p> <ul> <li>model-independent database and a solid database handling package that can be adjusted depending on your needs</li> <li>efficient processing of large data amounts </li> <li>smart and innovative system for data transformation for the given power market model </li> <li>easy aggregation using core model</li> </ul> <p></p> <p>Image \u00a9 NVE High-voltage power line in Sognefjellet</p>"},{"location":"demo_description/","title":"Demo description","text":"<p>The demo case includes 4 model runs:</p> <ul> <li>BASE: Northern Europe aggregated with aggregated hydropower and elspot price areas </li> <li>MODIFIED: the same as BASE but with demand in Norway increased by 20%</li> <li>DETAILED: the same as BASE but with detailed hydropower in the Nordic region (Norway, Sweden, Finland, Denmark)</li> <li>NORDIC: models the Nordic countries endogenously with aggregated hydropower and uses prices from BASE to model all other countries exogenously. Includes a 20% increase in demand in Norway.</li> </ul> <p>These cases correspond to demos 4-6 in the code, see overview of the demo steps below. </p> <p>You can run each demo step separately, or just run <code>run_all.py</code> to run all steps automatically. </p>"},{"location":"demo_description/#simulation-period","title":"Simulation period","text":"<p>Demo case is a series simulation, meaning that the power system is simulated at a given state, and weather years are simulated chronologically. In this demo we simulate the power system in 2023 with 3 weather years simulated after each other (1995, 1996, 1997).</p>"},{"location":"demo_description/#geographical-areas","title":"Geographical areas","text":"<p>The following countries are included into the demo case: </p> Countries included demos 3-5 demo 6 Norway endogenous endogenous Sweden endogenous endogenous Finland endogenous endogenous Denmark endogenous endogenous Netherlands endogenous exogenous Germany endogenous exogenous UK endogenous exogenous Poland endogenous exogenous Lithuania endogenous exogenous Estonia endogenous exogenous Latvia exogenous not included France exogenous not included Belgium exogenous not included Switzerland exogenous not included Austria exogenous not included Czech Republic exogenous not included Slovakia exogenous not included"},{"location":"demo_description/#jules-model","title":"Jules model","text":"<p>Power system will be simulated using open-source JulES model. The model will be installed automatically. </p> <p>JulES uses programming language Julia and it will also be installed on your PC for this demo if you do not have it yet. </p>"},{"location":"demo_description/#demo-steps","title":"Demo steps","text":"<p>The demo consists of 8 steps:</p> <ol> <li> <p>demo_1_download_dataset.py - downloads demo dataset into the database folder and unzipps files. </p> </li> <li> <p>demo_2_populate_model.py - creates a new model object and populates it with data from the database. Saves the populated object as a pickle file.</p> </li> <li> <p>demo_3_solve_model.py - BASE case reads populated model, aggregates power nodes and hydro power plants to elspot areas. Saves the aggregated object as a pickle file. Configures JulES power market model, sets time resolution and units. Solves the model with aggregated data.</p> </li> <li> <p>demo_4_modified_solve.py -  MODIFIED case increases demand in norwegian price areas by 20% in the model object. Runs the model again with the same configuration and the modified model object.</p> </li> <li> <p>demo_5_detailed_solve.py - DETAILED case solves model with detailed hydropower data.</p> </li> <li> <p>demo_6_nordic_solve.py - NORDIC case solves the Nordic model.</p> </li> <li> <p>demo_7_get_data.py - writes price, regional volumes and hydropower results to h5 format in order to send them to the dashboard.</p> </li> <li> <p>demo_8_run_dashboard.py - runs the dashboard in a browser and visualizes results from h5 files.</p> </li> </ol>"},{"location":"demo_description/#demo-folders","title":"Demo folders","text":"<p>Demo folders will be set up automatically:</p> <ul> <li>Demo will run in folder demo_folder in your parent directory. </li> <li>Demo dataset will appear in subfolder database.</li> <li>Julia environment for running JulES will be set up in subfolder julia_depot.</li> </ul> <p>Model runs will be performed in subfolders with names corresponding to the modelling cases:</p> <ul> <li>base</li> <li>detailed</li> <li>modified</li> <li>nordic</li> </ul> <p>Results from all model solves will also be converted into h5-files that will be shown in the dashboard.</p> <p>See demo_utils.py if you want to set up your own paths.</p>"},{"location":"reference/EventHandler/","title":"<code>EventHandler</code> class","text":"<p><code>EventHandler</code> class is used in FRAM demo to control display of demo output and handle events and information messages to the user. It displays differet kind of messages:</p> <ul> <li>info</li> <li>warning</li> <li>debug</li> <li>error</li> </ul> <p>It is imported into the demo in <code>demo_utils.py</code> script:</p> <pre><code>from framdemo.EventHandler import EventHandler\n</code></pre>"},{"location":"reference/EventHandler/#framdemo.EventHandler","title":"<code>framdemo.EventHandler</code>","text":"<p>Custom event handler to control display of demo output.</p>"},{"location":"reference/EventHandler/#framdemo.EventHandler.EventHandler","title":"<code>EventHandler</code>","text":"<p>Handle events from framcore.events.send_event.</p> Source code in <code>framdemo/EventHandler.py</code> <pre><code>class EventHandler:\n    \"\"\"Handle events from framcore.events.send_event.\"\"\"\n\n    def handle_event(self, sender: object, event_type: str, **kwargs: dict[str, object]) -&gt; None:\n        \"\"\"Try to handle event using rich.print. Use Python.print otherwise.\"\"\"\n        name = self._get_sender_name(sender)\n        try:\n            self._handle_event_using_rich(name, event_type, **kwargs)\n        except Exception:\n            if name:\n                print(name, event_type, kwargs)\n            else:\n                print(event_type, kwargs)\n\n    def _get_sender_name(self, sender: object) -&gt; str:\n        if inspect.isbuiltin(sender) or sender is None:\n            return \"\"\n        is_func = False\n        try:\n            path = Path(inspect.getfile(type(sender)))\n        except Exception:\n            path = Path(inspect.getfile(sender))\n            is_func = True\n        package = None\n        for parent in path.parents:\n            if parent.name in [\"framcore\", \"framdemo\", \"framdata\", \"framjules\"]:\n                package = parent.name\n                break\n        name = sender.__name__ if is_func else type(sender).__name__\n\n        try:\n            if not is_func:\n                caller_method_name = inspect.stack()[5].function\n                name = f\"{name}.{caller_method_name}\"\n        except Exception:\n            pass\n\n        return f\"{name}\" if package is None else f\"{package}.{name}\"\n\n    def _handle_event_using_rich(\n        self,\n        sender_name: str,\n        event_type: str,\n        **kwargs: dict[str, object],\n    ) -&gt; None:\n        import rich  # noqa: PLC0415\n\n        sender_color = \"#5DE2E7\"\n        sender_string = f\"[{sender_color}]{sender_name}: [/{sender_color}]\" if sender_name else \"\"\n\n        if event_type in [\"info\", \"debug\", \"warning\", \"error\"]:\n            color = {\n                \"info\": \"yellow\",\n                \"debug\": \"green\",\n                \"warning\": \"magenta\",\n                \"error\": \"red\",\n            }[event_type]\n            message = kwargs[\"message\"]\n\n            rich.print(f\"[bold {color}]{event_type}: [/bold {color}]{sender_string}{message}\")\n            return\n\n        if event_type == \"display\":\n            color = \"cyan\"\n            message = kwargs[\"message\"]\n            obj = kwargs[\"object\"]\n            obj = \"\" if obj is None else obj\n            if isinstance(obj, dict):\n                digits_round = kwargs.get(\"digits_round\", 3)\n                obj = self._try_prettify(obj, digits_round)\n            rich.print(f\"[bold {color}]{event_type}: [/bold {color}]{sender_string}{message}\", obj)\n            return\n\n        color = \"cyan\"\n        rich.print(f\"[bold {color}]{event_type}: [/bold {color}]{sender_string}\", kwargs)\n\n    def _try_prettify(self, obj: dict, digits_round: int) -&gt; dict:\n        if self._has_len_1(obj):\n            copied_obj = deepcopy(obj)\n            try:\n                self._convert_len_1_to_float(copied_obj, digits_round)\n                return copied_obj\n            except Exception:\n                pass\n        return obj\n\n    def _has_len_1(self, obj: object) -&gt; bool:\n        if isinstance(obj, dict):\n            for some_value in obj.values():\n                return self._has_len_1(some_value)\n            return False\n        return self._is_len_1(obj)\n\n    def _is_len_1(self, obj: object) -&gt; bool:\n        try:\n            return len(obj) == 1\n        except Exception:\n            return False\n\n    def _convert_len_1_to_float(self, obj: object, digits_round: int) -&gt; None:\n        if isinstance(obj, dict):\n            for key, value in obj.items():\n                if isinstance(value, dict):\n                    self._convert_len_1_to_float(value, digits_round)\n                else:\n                    obj[key] = round(float(value[0]), digits_round)\n</code></pre>"},{"location":"reference/EventHandler/#framdemo.EventHandler.EventHandler.handle_event","title":"<code>handle_event(sender: object, event_type: str, **kwargs: dict[str, object]) -&gt; None</code>","text":"<p>Try to handle event using rich.print. Use Python.print otherwise.</p> Source code in <code>framdemo/EventHandler.py</code> <pre><code>def handle_event(self, sender: object, event_type: str, **kwargs: dict[str, object]) -&gt; None:\n    \"\"\"Try to handle event using rich.print. Use Python.print otherwise.\"\"\"\n    name = self._get_sender_name(sender)\n    try:\n        self._handle_event_using_rich(name, event_type, **kwargs)\n    except Exception:\n        if name:\n            print(name, event_type, kwargs)\n        else:\n            print(event_type, kwargs)\n</code></pre>"},{"location":"reference/dashboard_app/","title":"<code>dashboard_app.py</code> script","text":"<p><code>dashboard_app.py</code> sript contains outline of the dashboard for results visulaization. Dashboard is built using streamlit package in Python. </p> <p>Script <code>run_dashboard.py</code> in the demo calls upon <code>dashboard_app.py</code> and renders the dashboard in your browser:</p> <pre><code>app_path = current_folder / \"dashboard_app.py\"\nsubprocess.run([\"streamlit\", \"run\", app_path, \"--server.port\", \"5000\"], check=True)\n</code></pre>"},{"location":"reference/dashboard_app/#framdemo.dashboard_app","title":"<code>framdemo.dashboard_app</code>","text":"<p>Simple demo dashboard app.</p> <p>This app reads results from HDF5 files and displays them using Streamlit and Plotly. Pages are craeted for price information, regional results, and hydropower information for the demo purpose.</p> <ol> <li>Sets up infrastructure for the dashboard.</li> </ol>"},{"location":"reference/demo_utils/","title":"<code>demo_utils.py</code> sript","text":"<p><code>demo_utils.py</code> contains paths that must be set by the users to run the demo. It also contains constants and small utility functions to make the demos more robust and easier to follow.</p>"},{"location":"reference/demo_utils/#framdemo.demo_utils","title":"<code>framdemo.demo_utils</code>","text":"<p>Contains paths that may be set by users to override default behaviour.</p> <p>Contains constants and small utility functions to make the demos more robust and easier to follow.</p>"},{"location":"reference/demo_utils/#framdemo.demo_utils.display","title":"<code>display(message: str, obj: object = None, digits_round: int = 1) -&gt; None</code>","text":"<p>Send an object to EventHandler for display.</p> Source code in <code>framdemo/demo_utils.py</code> <pre><code>def display(message: str, obj: object = None, digits_round: int = 1) -&gt; None:\n    \"\"\"Send an object to EventHandler for display.\"\"\"\n    send_event(None, \"display\", message=message, object=obj, digits_round=digits_round)\n</code></pre>"},{"location":"reference/demo_utils/#framdemo.demo_utils.load","title":"<code>load(path: Path) -&gt; object</code>","text":"<p>Read object from pickle file.</p> Source code in <code>framdemo/demo_utils.py</code> <pre><code>def load(path: Path) -&gt; object:\n    \"\"\"Read object from pickle file.\"\"\"\n    with Path.open(path, \"rb\") as f:\n        return pickle.load(f)\n</code></pre>"},{"location":"reference/demo_utils/#framdemo.demo_utils.save","title":"<code>save(obj: object, path: Path) -&gt; None</code>","text":"<p>Write object to pickle file at given path.</p> Source code in <code>framdemo/demo_utils.py</code> <pre><code>def save(obj: object, path: Path) -&gt; None:\n    \"\"\"Write object to pickle file at given path.\"\"\"\n    if not path.parent.exists():\n        path.parent.mkdir(parents=True, exist_ok=True)\n    with Path.open(path, \"wb\") as f:\n        pickle.dump(obj, f)\n</code></pre>"}]}